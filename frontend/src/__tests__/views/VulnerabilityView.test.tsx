import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { vi, describe, it, expect, beforeEach } from 'vitest';
import '@testing-library/jest-dom';
import { VulnerabilityView } from '../../views/VulnerabilityView';
import * as AuthContext from '../../context/AuthContext';
import * as VulnerabilityContext from '../../context/VulnerabilityContext';
import * as vulnerabilityService from '../../services/vulnerabilityService';
import { STATES, CRITICALITY_OPTIONS } from '../../utils/constants';

vi.mock('../../services/vulnerabilityService');
vi.mock('../../context/AuthContext');
vi.mock('../../context/VulnerabilityContext');

const mockVulnerabilities = [
    {
        id: '1',
        title: 'Test Vulnerability',
        description: 'Test Description',
        criticality: 'High',
        status: STATES.PENDING,
        cwe: 'CWE-79',
        createdAt: new Date().toISOString(),
        history: []
    }
];

const mockDispatch = vi.fn();

describe('VulnerabilityView', () => {
    beforeEach(() => {
        vi.clearAllMocks();
        (AuthContext.useAuth as any).mockReturnValue({ isAdmin: true });
        (VulnerabilityContext.useVulnerabilities as any).mockReturnValue({
            vulnerabilities: mockVulnerabilities,
            filteredVulnerabilities: mockVulnerabilities,
            filters: {
                status: '',
                criticality: '',
                search: ''
            },
            dispatch: mockDispatch,
            loading: false,
            error: null
        });
        (vulnerabilityService.fetchVulnerabilities as any).mockResolvedValue(mockVulnerabilities);
        (vulnerabilityService.createVulnerability as any).mockResolvedValue(mockVulnerabilities[0]);
        (vulnerabilityService.updateVulnerability as any).mockResolvedValue(mockVulnerabilities[0]);
        (vulnerabilityService.deleteVulnerability as any).mockResolvedValue({});
    });

    it('prevents non-admin users from editing', async () => {
        (AuthContext.useAuth as any).mockReturnValue({ isAdmin: false });
        render(<VulnerabilityView />);

        await waitFor(() => {
            expect(screen.getByText('Test Vulnerability')).toBeInTheDocument();
        });

        expect(screen.queryByRole('button', { name: /edit/i })).not.toBeInTheDocument();
    });

    it('handles errors during vulnerability fetch', async () => {
        const error = new Error('Failed to fetch');
        (vulnerabilityService.fetchVulnerabilities as any).mockRejectedValue(error);
        (VulnerabilityContext.useVulnerabilities as any).mockReturnValue({
            vulnerabilities: [],
            filteredVulnerabilities: [],
            filters: { status: '', criticality: '', search: '' },
            dispatch: mockDispatch,
            loading: false,
            error: 'Failed to fetch vulnerabilities'
        });

        render(<VulnerabilityView />);

        await waitFor(() => {
            expect(screen.getByText(/failed to fetch vulnerabilities/i)).toBeInTheDocument();
        });
    });    

    it('handles status changes', async () => {
        render(<VulnerabilityView />);

        await waitFor(() => {
            expect(screen.getByText('Test Vulnerability')).toBeInTheDocument();
        });

        const statusSelect = screen.getByLabelText('Change Status');
        await userEvent.selectOptions(statusSelect, STATES.IN_PROGRESS);

        await waitFor(() => {
            expect(vulnerabilityService.updateVulnerability).toHaveBeenCalledWith(
                '1',
                {
                    status: STATES.IN_PROGRESS,
                    history: [
                        {
                            at: expect.any(String),
                            changes: [
                                {
                                    field: 'Status',
                                    from: STATES.PENDING,
                                    to: STATES.IN_PROGRESS,
                                }
                            ]
                        }
                    ]
                }
            );
        });
    });
});
