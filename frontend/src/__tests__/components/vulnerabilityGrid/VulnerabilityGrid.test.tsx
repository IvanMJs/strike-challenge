import { describe, it, expect, vi } from 'vitest';
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom';
import VulnerabilityGrid from '../../../components/vulnerabilityGrid/VulnerabilityGrid';
import { Vulnerability } from '../../../types/vulnerability';
import { VULNERABILITY_STATES } from '../../../types/constants';

vi.mock('../../../components/vulnerabilityCard/VulnerabilityCard', () => ({
  default: ({ vuln }: { vuln: Vulnerability }) => (
    <div data-testid="vuln-card">
      Vulnerability: {vuln.title}
    </div>
  ),
}));

describe('VulnerabilityGrid', () => {  const mockVulnerabilities: Vulnerability[] = [
    {
      id: '1',
      title: 'Test Vulnerability 1',
      description: 'Test Description 1',
      cwe: 'CWE-79',
      status: 'Pending Fix',
      criticality: 'High',
      createdAt: new Date().toISOString(),
    },
    {
      id: '2',
      title: 'Test Vulnerability 2',
      description: 'Test Description 2',
      cwe: 'CWE-89',
      status: 'In Progress',
      criticality: 'Medium',
      createdAt: new Date().toISOString(),
    },
  ];

  const mockProps = {
    vulnerabilities: mockVulnerabilities,
    STATES: VULNERABILITY_STATES,
    onEdit: vi.fn(),
    onDelete: vi.fn(),
    onStatusChange: vi.fn(),
  };

  it('renders empty state when no vulnerabilities are provided', () => {
    render(
      <VulnerabilityGrid
        {...mockProps}
        vulnerabilities={[]}
      />
    );

    expect(screen.getByText('No vulnerabilities found.')).toBeInTheDocument();
  });
  it('renders empty state when vulnerabilities is empty', () => {
    render(
      <VulnerabilityGrid
        {...mockProps}
        vulnerabilities={[]}
      />
    );

    expect(screen.getByText('No vulnerabilities found.')).toBeInTheDocument();
  });

  it('renders vulnerability cards for each vulnerability', () => {
    render(<VulnerabilityGrid {...mockProps} />);

    const cards = screen.getAllByTestId('vuln-card');
    expect(cards).toHaveLength(mockVulnerabilities.length);
    expect(screen.getByText(`Vulnerability: ${mockVulnerabilities[0].title}`)).toBeInTheDocument();
    expect(screen.getByText(`Vulnerability: ${mockVulnerabilities[1].title}`)).toBeInTheDocument();
  });
});
