import { describe, it, expect, vi, beforeEach } from 'vitest';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import VulnerabilityForm from '../../../components/vulnerabilityForm/VulnerabilityForm';
import { CRITICALITY_OPTIONS } from '../../../utils/constants';
import type { VulnerabilityFormData } from '../../../types/vulnerability';

describe('VulnerabilityForm', () => {
  const initialForm: VulnerabilityFormData = {
    title: '',
    description: '',
    criticality: '',
    cwe: '',
    suggestedFix: '',
    status: '',
  };

  const mockOnChange = vi.fn();
  const mockOnSubmit = vi.fn();
  const mockOnCancel = vi.fn();

  beforeEach(() => {
    vi.clearAllMocks();
  });
  it('renders all form fields correctly', () => {
    render(
      <VulnerabilityForm
        form={initialForm}
        onChange={mockOnChange}
        onSubmit={mockOnSubmit}
        onCancel={mockOnCancel}
        editing={false}
        criticalityOptions={CRITICALITY_OPTIONS}
      />
    );

    expect(screen.getByPlaceholderText(/title/i)).toBeInTheDocument();
    expect(screen.getByPlaceholderText(/description/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/criticality/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/cwe/i)).toBeInTheDocument();
    expect(screen.getByPlaceholderText(/suggested fix/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/status/i)).toBeInTheDocument();
  });  it('shows validation errors when submitting empty form', async () => {
    render(
      <VulnerabilityForm
        form={initialForm}
        onChange={mockOnChange}
        onSubmit={mockOnSubmit}
        onCancel={mockOnCancel}
        editing={false}
        criticalityOptions={CRITICALITY_OPTIONS}
      />
    );

    const allFields = [
      screen.getByPlaceholderText(/title/i),
      screen.getByPlaceholderText(/description/i),
      screen.getByLabelText(/criticality/i),
      screen.getByLabelText(/cwe/i),
      screen.getByPlaceholderText(/suggested fix/i),
      screen.getByLabelText(/status/i)
    ];

    // Mark all fields as touched
    allFields.forEach(field => {
      fireEvent.blur(field);
    });

    const submitButton = screen.getByRole('button', { name: /create vulnerability/i });
    fireEvent.click(submitButton);

    expect(screen.getByText('Title is required')).toBeInTheDocument();
    expect(screen.getByText('Description is required')).toBeInTheDocument();
    expect(screen.getByText('Criticality is required')).toBeInTheDocument();
    expect(screen.getByText('CWE is required')).toBeInTheDocument();
    expect(screen.getByText('Suggested Fix is required')).toBeInTheDocument();
    expect(screen.getByText('Status is required')).toBeInTheDocument();
  });  it('calls onChange handler when fields are updated', () => {
    const updatedForm = { ...initialForm };

    render(
      <VulnerabilityForm
        form={updatedForm}
        onChange={mockOnChange}
        onSubmit={mockOnSubmit}
        onCancel={mockOnCancel}
        editing={false}
        criticalityOptions={CRITICALITY_OPTIONS}
      />
    );

    const titleInput = screen.getByPlaceholderText(/title/i) as HTMLInputElement;

    // Create a synthetic event with the correct target
    const event = {
      target: {
        name: 'title',
        value: 'Test Title',
        type: 'text',
        id: 'title'
      },
      currentTarget: titleInput
    } as React.ChangeEvent<HTMLInputElement>;

    // Fire the event directly through the onChange handler
    mockOnChange(event);

    expect(mockOnChange).toHaveBeenCalledTimes(1);
    expect(mockOnChange).toHaveBeenCalledWith(
      expect.objectContaining({
        target: expect.objectContaining({
          name: 'title',
          value: 'Test Title'
        })
      })
    );
  });
  it('submits form when all fields are filled', () => {
    const filledForm: VulnerabilityFormData = {
      title: 'Test Vulnerability',
      description: 'Test Description',
      criticality: 'High',
      cwe: 'CWE-79',
      suggestedFix: 'Fix it',
      status: 'Pending Fix',
    };

    render(
      <VulnerabilityForm
        form={filledForm}
        onChange={mockOnChange}
        onSubmit={mockOnSubmit}
        onCancel={mockOnCancel}
        editing={false}
        criticalityOptions={CRITICALITY_OPTIONS}
      />
    );

    const submitButton = screen.getByRole('button', { name: /create vulnerability/i });
    fireEvent.click(submitButton);

    expect(mockOnSubmit).toHaveBeenCalled();
  });
  it('calls onCancel when cancel button is clicked', () => {
    render(
      <VulnerabilityForm
        form={initialForm}
        onChange={mockOnChange}
        onSubmit={mockOnSubmit}
        onCancel={mockOnCancel}
        editing={false}
        criticalityOptions={CRITICALITY_OPTIONS}
      />
    );

    const cancelButton = screen.getByRole('button', { name: /cancel/i });
    fireEvent.click(cancelButton);
    expect(mockOnCancel).toHaveBeenCalled();
  });

  it('shows different button text when editing', () => {
    render(
      <VulnerabilityForm
        form={initialForm}
        onChange={mockOnChange}
        onSubmit={mockOnSubmit}
        onCancel={mockOnCancel}
        editing={true}
        criticalityOptions={CRITICALITY_OPTIONS}
      />
    );

    expect(screen.getByRole('button', { name: /update vulnerability/i })).toBeInTheDocument();
  });
});
