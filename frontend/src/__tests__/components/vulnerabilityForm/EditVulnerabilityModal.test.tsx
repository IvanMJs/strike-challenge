import { describe, it, expect, vi } from 'vitest';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import '@testing-library/jest-dom';
import EditVulnerabilityModal from '../../../components/editVulnerabilityModal/EditVulnerabilityModal'; 
import { Vulnerability } from '../../../types/vulnerability';
import { STATES, CRITICALITY_OPTIONS } from '../../../utils/constants';

const mockVulnerability: Vulnerability = {
    id: '1',
    title: 'Test Vulnerability',
    description: 'Test Description',
    criticality: 'High',
    status: STATES.PENDING,
    cwe: 'CWE-79',
    createdAt: new Date().toISOString(),
    history: []
};

describe('EditVulnerabilityModal', () => {
    const mockOnClose = vi.fn();
    const mockOnSave = vi.fn();

    beforeEach(() => {
        vi.clearAllMocks();
    });

    it('calls onClose when close button is clicked', async () => {
        render(
            <EditVulnerabilityModal
                isOpen={true}
                onClose={mockOnClose}
                onSave={mockOnSave}
                vulnerability={mockVulnerability}
                STATES={STATES}
            />
        );

        const closeButton = screen.getByRole('button', { name: /cancel/i });
        await userEvent.click(closeButton);

        expect(mockOnClose).toHaveBeenCalled();
    });

});
