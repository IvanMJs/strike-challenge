import { render, screen, act } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { describe, it, expect, vi, beforeEach } from 'vitest';
import '@testing-library/jest-dom';
import { VulnerabilityProvider, useVulnerabilities } from '../../context/VulnerabilityContext';
import * as vulnerabilityService from '../../services/vulnerabilityService';
import { Vulnerability } from '../../types/vulnerability';
import { VulnerabilityState, VulnerabilityCriticality } from '../../types/constants';
import { VULNERABILITY_STATES } from '../../types/constants';

// Mock the vulnerability service
vi.mock('../../services/vulnerabilityService', () => ({
  fetchVulnerabilities: vi.fn(),
  createVulnerability: vi.fn(),
  updateVulnerability: vi.fn(),
  deleteVulnerability: vi.fn(),
}));

const mockVulnerabilities: Vulnerability[] = [
  {
    id: '1',
    title: 'Test Vulnerability 1',
    description: 'Description 1',
    criticality: 'High' as VulnerabilityCriticality,
    status: VULNERABILITY_STATES.PENDING,
    cwe: 'CWE-79',
    createdAt: '2023-01-01',
  },
  {
    id: '2',
    title: 'Test Vulnerability 2',
    description: 'Description 2',
    criticality: 'Medium' as VulnerabilityCriticality,
    status: VULNERABILITY_STATES.SOLVED,
    cwe: 'CWE-89',
    createdAt: '2023-01-02',
  },
];

// Test component that uses the vulnerability context
function TestComponent() {
  const {
    vulnerabilities,
    filteredVulnerabilities,
    loading,
    error,
    filters,
    dispatch,
  } = useVulnerabilities();

  return (
    <div>
      <div data-testid="vulnerabilities">
        {loading ? 'Loading...' : JSON.stringify(vulnerabilities)}
      </div>
      <div data-testid="filtered">
        {JSON.stringify(filteredVulnerabilities)}
      </div>
      <div data-testid="error">{error || 'no error'}</div>
      <div data-testid="filters">{JSON.stringify(filters)}</div>
      <button onClick={() => dispatch({ type: 'SET_LOADING', payload: true })}>
        Set Loading
      </button>
      <button onClick={() => dispatch({ type: 'SET_ERROR', payload: 'test error' })}>
        Set Error
      </button>
      <button
        onClick={() =>
          dispatch({
            type: 'SET_FILTER',
            payload: { key: 'criticality', value: 'High' },
          })
        }
      >
        Set Filter
      </button>
      <button onClick={() => dispatch({ type: 'CLEAR_FILTERS' })}>Clear Filters</button>
    </div>
  );
}

describe('VulnerabilityContext', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  it('provides initial state', () => {
    render(
      <VulnerabilityProvider>
        <TestComponent />
      </VulnerabilityProvider>
    );

    expect(screen.getByTestId('vulnerabilities')).toHaveTextContent('[]');
    expect(screen.getByTestId('filtered')).toHaveTextContent('[]');
    expect(screen.getByTestId('error')).toHaveTextContent('no error');
    expect(screen.getByTestId('filters')).toHaveTextContent('{"status":"","criticality":"","search":""}');
  });

  it('updates loading state', async () => {
    render(
      <VulnerabilityProvider>
        <TestComponent />
      </VulnerabilityProvider>
    );

    await act(async () => {
      await userEvent.click(screen.getByText('Set Loading'));
    });

    expect(screen.getByTestId('vulnerabilities')).toHaveTextContent('Loading...');
  });

  it('updates error state', async () => {
    render(
      <VulnerabilityProvider>
        <TestComponent />
      </VulnerabilityProvider>
    );

    await act(async () => {
      await userEvent.click(screen.getByText('Set Error'));
    });

    expect(screen.getByTestId('error')).toHaveTextContent('test error');
  });

  it('handles filter changes', async () => {
    render(
      <VulnerabilityProvider>
        <TestComponent />
      </VulnerabilityProvider>
    );

    await act(async () => {
      await userEvent.click(screen.getByText('Set Filter'));
    });

    expect(screen.getByTestId('filters')).toHaveTextContent(
      JSON.stringify({ status: '', criticality: 'High', search: '' })
    );
  });

  it('clears filters', async () => {
    render(
      <VulnerabilityProvider>
        <TestComponent />
      </VulnerabilityProvider>
    );

    // Set filter first
    await act(async () => {
      await userEvent.click(screen.getByText('Set Filter'));
    });

    // Then clear it
    await act(async () => {
      await userEvent.click(screen.getByText('Clear Filters'));
    });

    expect(screen.getByTestId('filters')).toHaveTextContent(
      JSON.stringify({ status: '', criticality: '', search: '' })
    );
  });

  it('throws error when useVulnerabilities is used outside VulnerabilityProvider', () => {
    const consoleSpy = vi.spyOn(console, 'error').mockImplementation(() => {});

    expect(() => {
      render(<TestComponent />);
    }).toThrow('useVulnerabilities must be used within a VulnerabilityProvider');

    consoleSpy.mockRestore();
  });
});
