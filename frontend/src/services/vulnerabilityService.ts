import { Vulnerability, VulnerabilityCreate } from '../types/vulnerability';

const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:3000';

const getAuthHeaders = () => {
  const token = localStorage.getItem('token');
  if (!token) {
    throw new Error('No authentication token found');
  }
  return {
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json'
  };
};

export const fetchVulnerabilities = async (): Promise<Vulnerability[]> => {
  try {
    const response = await fetch(`${API_URL}/api/vulnerabilities`, {
      headers: getAuthHeaders(),
    });
    
    if (!response.ok) {
      const error = await response.json().catch(() => ({ error: 'Failed to fetch vulnerabilities' }));
      throw new Error(error.error || 'Failed to fetch vulnerabilities');
    }
    
    return response.json();
  } catch (error) {
    console.error('Error fetching vulnerabilities:', error);
    throw error;
  }
};

export const createVulnerability = async (vulnerability: VulnerabilityCreate): Promise<Vulnerability> => {
  try {
    const response = await fetch(`${API_URL}/api/vulnerabilities`, {
      method: 'POST',
      headers: getAuthHeaders(),
      body: JSON.stringify(vulnerability),
    });

    if (!response.ok) {
      const error = await response.json().catch(() => ({ error: 'Failed to create vulnerability' }));
      throw new Error(error.error || 'Failed to create vulnerability');
    }

    return response.json();
  } catch (error) {
    console.error('Error creating vulnerability:', error);
    throw error;
  }
};

export const updateVulnerability = async (id: string | number, vulnerability: Partial<Vulnerability>): Promise<Vulnerability> => {
  try {
    const numericId = typeof id === 'string' ? parseInt(id, 10) : id;
    if (isNaN(numericId)) {
      throw new Error('Invalid ID format');
    }

    const response = await fetch(`${API_URL}/api/vulnerabilities/${numericId}`, {
      method: 'PUT',
      headers: getAuthHeaders(),
      body: JSON.stringify(vulnerability),
    });

    if (!response.ok) {
      const error = await response.json().catch(() => ({ error: 'Failed to update vulnerability' }));
      throw new Error(error.error || 'Failed to update vulnerability');
    }

    return response.json();
  } catch (error) {
    console.error('Error updating vulnerability:', error);
    throw error;
  }
};

export const deleteVulnerability = async (id: string | number): Promise<void> => {
  try {
    // Ensure id is a number
    const numericId = typeof id === 'string' ? parseInt(id, 10) : id;
    
    console.log('=== Frontend Delete Request ===');
    console.log('Original ID:', id, 'Type:', typeof id);
    console.log('Converted ID:', numericId, 'Type:', typeof numericId);
    
    if (isNaN(numericId)) {
      console.error('Invalid ID format:', id);
      throw new Error('Invalid ID format');
    }

    const token = localStorage.getItem('token');
    console.log('Token present:', !!token);

    const response = await fetch(`${API_URL}/api/vulnerabilities/${numericId}`, {
      method: 'DELETE',
      headers: {
        'Authorization': `Bearer ${token}`,
      },
    });

    console.log('Delete response status:', response.status);

    if (!response.ok) {
      if (response.status === 404) {
        console.error('Vulnerability not found for ID:', numericId);
        throw new Error('Vulnerability not found');
      }

      // Try to parse error response
      try {
        const errorData = await response.json();
        console.error('Server error response:', errorData);
        throw new Error(errorData.error || 'Failed to delete vulnerability');
      } catch (e) {
        console.error('Error parsing error response:', e);
        throw new Error('Failed to delete vulnerability');
      }
    }

    console.log('Successfully deleted vulnerability with ID:', numericId);
    return;
  } catch (error) {
    console.error('Delete operation error:', error);
    throw error;
  }
};
