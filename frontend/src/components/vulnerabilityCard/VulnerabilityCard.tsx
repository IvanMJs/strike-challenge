import React, { useState } from 'react';
import './VulnerabilityCard.scss';
import ConfirmDialog from '../confirmDialog/ConfirmDialog';
import { VulnerabilityCardProps } from '../../types/vulnerability';
import { VulnerabilityState } from '../../types/constants';
import { useAuth } from '../../context/AuthContext';

interface HistoryEntry {
  from: VulnerabilityState;
  to: VulnerabilityState;
  at: string;
}

export default function VulnerabilityCard({ vuln, STATES, onEdit, onDelete, onStatusChange }: VulnerabilityCardProps) {
  const [showConfirm, setShowConfirm] = useState(false);
  const [history, setHistory] = useState(vuln.history || []);
  const { isAdmin } = useAuth() || { isAdmin: false };

  function handleStatusChange(nextStatus: VulnerabilityState): void {
    if (onStatusChange) {
      onStatusChange(vuln, nextStatus);
      setHistory((prev: HistoryEntry[]) => [
        ...prev,
        { from: vuln.status, to: nextStatus, at: new Date().toLocaleString() }
      ]);
    }
  }

  function handleDelete(): void {
    setShowConfirm(false);
    if (onDelete) onDelete(vuln);
  }

  return (
    <div className="vuln-card">
      <div className="vuln-card-title">{vuln.title}</div>
      <div className="vuln-card-content">
        <div><strong>Description:</strong> {vuln.description}</div>
        <div>
          <strong>Criticality:</strong> <span className={
            vuln.criticality === 'High' ? 'criticality-high' :
              vuln.criticality === 'Medium' ? 'criticality-medium' :
                vuln.criticality === 'Low' ? 'criticality-low' : ''
          }>{vuln.criticality}</span>
        </div>
        <div><strong>CWE:</strong> {vuln.cwe}</div>
        <div><strong>Suggested Fix:</strong> {vuln.suggestedFix}</div>
        <div>
          <strong>Status:</strong>
          {isAdmin && onStatusChange ? (
            <select
              value={vuln.status}
              onChange={e => {
                const next = e.target.value as VulnerabilityState;
                if (vuln.status !== next) {
                  handleStatusChange(next);
                }
              }}
            >
              {Object.values(STATES).map(state => (
                <option key={state} value={state}>{state}</option>
              ))}
            </select>
          ) : (
            <span>{vuln.status}</span>
          )}
        </div>
        <div><strong>Created:</strong> {vuln.createdAt || 'N/A'}</div>
        {history.length > 0 && (
          <div className="vuln-history">
            <strong>History:</strong>
            <ul>
              {history.map((entry: HistoryEntry, index: number) => (
                <li key={`${entry.from}-${entry.to}-${index}`}>
                  {entry.from} â†’ {entry.to} ({entry.at})
                </li>
              ))}
            </ul>
          </div>
        )}
      </div>
      {isAdmin && (
        <div className="vuln-card-actions">
          {onEdit && <button onClick={() => onEdit(vuln)}>Edit</button>}
          {onDelete && <button onClick={() => setShowConfirm(true)}>Delete</button>}
        </div>
      )}      <ConfirmDialog 
        open={showConfirm}
        message="Are you sure you want to delete this vulnerability?"
        onConfirm={handleDelete}
        onCancel={() => setShowConfirm(false)}
      />
    </div>
  );
}
