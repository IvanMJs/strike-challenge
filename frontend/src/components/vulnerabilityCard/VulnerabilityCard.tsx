import React, { useState, useEffect } from 'react';
import './VulnerabilityCard.scss';
import ConfirmDialog from '../confirmDialog/ConfirmDialog';
import EditVulnerabilityModal from '../editVulnerabilityModal/EditVulnerabilityModal';
import { VulnerabilityCardProps, HistoryEntry } from '../../types/vulnerability';
import { VulnerabilityState } from '../../types/constants';
import { useAuth } from '../../context/AuthContext';

export default function VulnerabilityCard({ vuln, STATES, onEdit, onDelete, onStatusChange }: VulnerabilityCardProps) {
  const [showConfirm, setShowConfirm] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [history, setHistory] = useState<HistoryEntry[]>(vuln.history || []);
  const { isAdmin } = useAuth() || { isAdmin: false };

  // Update local history when vuln.history changes
  useEffect(() => {
    setHistory(vuln.history || []);
  }, [vuln.history]);

  const formatDate = (date: string) => {
    const d = new Date(date);
    if (isNaN(d.getTime())) return 'Invalid date';
    return d.toLocaleString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      hour12: true
    });
  };

  const formatHistoryDate = (date: string) => {
    const d = new Date(date);
    if (isNaN(d.getTime())) return 'Invalid date';
    return d.toLocaleString('en-US', {
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      hour12: true
    });
  };
  function handleStatusChange(nextStatus: VulnerabilityState): void {
    if (onStatusChange && nextStatus !== vuln.status) {
      onStatusChange(vuln, nextStatus);
    }
  }

  function handleDelete(): void {
    setShowConfirm(false);
    if (onDelete) onDelete(vuln);
  }

  const getCardClassName = () => {
    const baseClass = "vuln-card";
    const criticalityClass = vuln.criticality === 'High'
      ? 'criticality-background-high'
      : vuln.criticality === 'Medium'
        ? 'criticality-background-medium'
        : vuln.criticality === 'Low'
          ? 'criticality-background-low'
          : '';
    return `${baseClass} ${criticalityClass}`;
  };

  const handleEditClick = () => {
    setShowEditModal(true);
  };
  const handleEditSave = (updatedVulnerability: typeof vuln) => {
    setShowEditModal(false);
    if (onEdit) {
      onEdit(updatedVulnerability);
    }
  };

  const handleEditCancel = () => {
    setShowEditModal(false);
  };

  return (
    <div className={getCardClassName()}>
      <div className="vuln-card-title">{vuln.title}</div>
      <div className="vuln-card-content">
        <div><strong>Description:</strong> {vuln.description}</div>
        <div>
          <strong>Criticality:</strong> <span className={
            vuln.criticality === 'High' ? 'criticality-high' :
              vuln.criticality === 'Medium' ? 'criticality-medium' :
                vuln.criticality === 'Low' ? 'criticality-low' : ''
          }>{vuln.criticality}</span>
        </div>
        <div><strong>CWE:</strong> {vuln.cwe}</div>
        <div><strong>Suggested Fix:</strong> {vuln.suggestedFix}</div>
        <div>          <strong>Status:</strong>
          {isAdmin && onStatusChange ? (
            <select
              aria-label="Change Status"
              value={vuln.status}
              onChange={e => {
                e.stopPropagation();
                const next = e.target.value as VulnerabilityState;
                handleStatusChange(next);
              }}
            >
              {Object.values(STATES).map(state => (
                <option key={state} value={state}>{state}</option>
              ))}
            </select>
          ) : (
            <span>{vuln.status}</span>
          )}
        </div>
        <div><strong>Created:</strong> {vuln.createdAt !== '' && vuln.createdAt ? formatDate(vuln.createdAt) : ''}</div>
        {history.length > 0 && (          <div className="vuln-history">
            <strong>Change History</strong>
            <ul>              {history.map((entry: HistoryEntry, index: number) => (
                <li key={`${vuln.id}-history-${entry.at}-${index}`}>
                  <span data-testid="history-entry">
                    <span className="history-date">{formatHistoryDate(entry.at)}</span>
                    <div className="history-changes">
                      {entry.changes.map((change, changeIndex) => (
                        <div key={`${vuln.id}-change-${entry.at}-${change.field}-${changeIndex}`} className="history-change">
                          <strong>{change.field}:</strong> {change.from} â†’ {change.to}
                        </div>
                      ))}
                    </div>
                  </span>
                </li>
              ))}
            </ul>
          </div>
        )}
      </div>
      {isAdmin && (
        <div className="vuln-card-actions">
          {onEdit && <button onClick={handleEditClick}>Edit</button>}
          {onDelete && <button onClick={() => setShowConfirm(true)}>Delete</button>}
        </div>
      )}
      <ConfirmDialog
        open={showConfirm}
        message="Are you sure you want to delete this vulnerability?"
        onConfirm={handleDelete}
        onCancel={() => setShowConfirm(false)}
      />
      <EditVulnerabilityModal
        vulnerability={vuln}
        isOpen={showEditModal}
        onClose={handleEditCancel}
        onSave={handleEditSave}
        STATES={STATES}
      />
    </div>
  );
}
