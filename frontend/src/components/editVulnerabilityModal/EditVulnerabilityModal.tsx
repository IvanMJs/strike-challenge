import React, { useState, useEffect } from 'react';
import { createPortal } from 'react-dom';
import { Vulnerability, HistoryEntry } from '../../types/vulnerability';
import { VulnerabilityState } from '../../types/constants';
import { CWE_OPTIONS } from '../../utils/constants';
import './EditVulnerabilityModal.scss';

interface EditVulnerabilityModalProps {
    vulnerability: Vulnerability;
    isOpen: boolean;
    onClose: () => void;
    onSave: (updatedVulnerability: Vulnerability) => void;
    STATES: Record<string, VulnerabilityState>;
}

export default function EditVulnerabilityModal({ 
    vulnerability, 
    isOpen, 
    onClose, 
    onSave,
    STATES 
}: EditVulnerabilityModalProps) {
    const [formData, setFormData] = useState<Vulnerability>(vulnerability);

    useEffect(() => {
        setFormData(vulnerability);
    }, [vulnerability]);

    useEffect(() => {
        const handleEscape = (event: KeyboardEvent) => {
            if (event.key === 'Escape') {
                onClose();
            }
        };

        if (isOpen) {
            document.body.style.overflow = 'hidden';
            document.addEventListener('keydown', handleEscape);
        }

        return () => {
            document.body.style.overflow = '';
            document.removeEventListener('keydown', handleEscape);
        };
    }, [isOpen, onClose]);

    if (!isOpen) return null;

    const getChangedFields = () => {
        const changes: { field: string; from: string; to: string }[] = [];
        const fieldsToTrack = {
            title: 'Title',
            description: 'Description',
            criticality: 'Criticality',
            status: 'Status',
            cwe: 'CWE',
            suggestedFix: 'Suggested Fix'
        } as const;

        Object.entries(fieldsToTrack).forEach(([key, label]) => {
            const originalValue = vulnerability[key as keyof typeof fieldsToTrack];
            const newValue = formData[key as keyof typeof fieldsToTrack];

            if (originalValue !== newValue && originalValue && newValue) {
                changes.push({
                    field: label,
                    from: originalValue.toString(),
                    to: newValue.toString()
                });
            }
        });

        return changes;
    };

    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault();
        e.stopPropagation();
        
        const changes = getChangedFields();
        
        // Only create history entry if there are changes
        if (changes.length > 0) {
            const newHistoryEntry: HistoryEntry = {
                at: new Date().toISOString(),
                changes
            };

            const updatedVulnerability = {
                ...formData,
                history: [
                    ...(vulnerability.history || []),
                    newHistoryEntry
                ]
            };
            
            onSave(updatedVulnerability);
        } else {
            // If no changes, just close the modal
            onClose();
        }
    };

    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: value
        }));
    };

    const handleModalClick = (e: React.MouseEvent) => {
        e.stopPropagation();
    };

    const handleBackdropClick = (e: React.MouseEvent) => {
        if (e.target === e.currentTarget) {
            onClose();
        }
    };

    const modal = (
        <div className="modal-backdrop" onClick={handleBackdropClick}>
            <div className="modal-container" onClick={handleModalClick}>
                <div className="modal-header">
                    <h2>Edit Vulnerability</h2>
                </div>
                <div className="modal-body">
                    <form onSubmit={handleSubmit}>
                        <div className="form-group">
                            <label htmlFor="title">Title</label>
                            <input
                                type="text"
                                id="title"
                                name="title"
                                value={formData.title}
                                onChange={handleChange}
                                required
                            />
                        </div>

                        <div className="form-group">
                            <label htmlFor="description">Description</label>
                            <textarea
                                id="description"
                                name="description"
                                value={formData.description}
                                onChange={handleChange}
                                required
                                rows={4}
                            />
                        </div>

                        <div className={`form-group criticality-${formData.criticality?.toLowerCase()}`}>
                            <label htmlFor="criticality">Criticality</label>
                            <select
                                id="criticality"
                                name="criticality"
                                value={formData.criticality}
                                onChange={handleChange}
                                required
                            >
                                <option value="">Select criticality</option>
                                <option value="High">High</option>
                                <option value="Medium">Medium</option>
                                <option value="Low">Low</option>
                            </select>
                        </div>

                        <div className="form-group">
                            <label htmlFor="status">Status</label>
                            <select
                                id="status"
                                name="status"
                                value={formData.status}
                                onChange={handleChange}
                                required
                            >
                                <option value="">Select status</option>
                                {Object.values(STATES).map(state => (
                                    <option key={state} value={state}>{state}</option>
                                ))}
                            </select>
                        </div>

                        <div className="form-group">
                            <label htmlFor="cwe">CWE</label>
                            <select
                                id="cwe"
                                name="cwe"
                                value={formData.cwe}
                                onChange={handleChange}
                                required
                            >
                                <option value="">Select CWE</option>
                                {CWE_OPTIONS.map(cwe => (
                                    <option key={cwe} value={cwe}>{cwe}</option>
                                ))}
                            </select>
                        </div>

                        <div className="form-group">
                            <label htmlFor="suggestedFix">Suggested Fix</label>
                            <textarea
                                id="suggestedFix"
                                name="suggestedFix"
                                value={formData.suggestedFix}
                                onChange={handleChange}
                                required
                                rows={4}
                            />
                        </div>

                        <div className="modal-footer">
                            <button type="button" className="btn-cancel" onClick={onClose}>
                                Cancel
                            </button>
                            <button type="submit" className="btn-save">
                                Save Changes
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    );

    return createPortal(modal, document.body);
}
