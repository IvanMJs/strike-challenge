import React, { useState, FormEvent, useEffect } from "react";
import "./VulnerabilityForm.scss";
import { STATES, CWE_OPTIONS } from "../../utils/constants";
import { VulnerabilityState } from "../../types/constants";

interface VulnerabilityFormProps {
  form: {
    title: string;
    criticality: string;
    cwe: string;
    suggestedFix?: string;
    status: VulnerabilityState;
    description: string;
  };
  onChange: (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => void;
  onSubmit: (e: FormEvent) => void;
  onCancel?: () => void;
  editing?: boolean;
  criticalityOptions: string[];
}

export default function VulnerabilityForm({
  form,
  onChange,
  onSubmit,
  onCancel,
  editing,
  criticalityOptions,
}: VulnerabilityFormProps) {
  const [touched, setTouched] = useState<Record<string, boolean>>({});
  const [submitted, setSubmitted] = useState(false);

  // Reset the form state when the form prop changes (which happens after successful submission)
  useEffect(() => {
    const isEmptyForm = !form.title && !form.description && !form.criticality && !form.cwe && !form.suggestedFix;
    if (isEmptyForm) {
      setTouched({});
      setSubmitted(false);
    }
  }, [form]);

  function handleBlur(e: React.FocusEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>): void {
    setTouched({ ...touched, [e.target.name]: true });
  }

  function handleSubmit(e: FormEvent<HTMLFormElement>): void {
    e.preventDefault();
    setSubmitted(true);
    if (
      !form.title.trim() ||
      !form.criticality ||
      !form.cwe ||
      !form.suggestedFix?.trim() ||
      !form.status ||
      !form.description.trim()
    ) {
      return;
    }
    onSubmit(e);
  }

  const showError = (field: keyof typeof form) =>
    (touched[field] || submitted) && !form[field]?.toString().trim();

  return (
    <form onSubmit={handleSubmit} className="vuln-form">
      <div className="vuln-form-grid">
        <div className="form-group">
          <label>Title</label>
          <input
            type="text"
            name="title"
            value={form.title}
            onChange={onChange}
            onBlur={handleBlur}
            placeholder="Title"
            className={showError("title") ? "form-error" : ""}
          />
          {showError("title") && <div className="form-error">Title is required</div>}
        </div>

        <div className="form-group">
          <label>Criticality</label>
          <select
            name="criticality"
            value={form.criticality}
            onChange={onChange}
            onBlur={handleBlur}
            className={`${showError("criticality") ? "form-error" : ""} ${
              form.criticality ? `criticality-${form.criticality.toLowerCase()}` : ""
            }`}
          >
            <option value="">Select Criticality</option>
            {criticalityOptions.map((option) => (
              <option key={option} value={option}>
                {option}
              </option>
            ))}
          </select>
          {showError("criticality") && <div className="form-error">Criticality is required</div>}
        </div>

        <div className="form-group">
          <label>CWE</label>
          <select
            name="cwe"
            value={form.cwe}
            onChange={onChange}
            onBlur={handleBlur}
            className={showError("cwe") ? "form-error" : ""}
          >
            <option value="">Select CWE</option>
            {CWE_OPTIONS.map((option) => (
              <option key={option} value={option}>
                {option}
              </option>
            ))}
          </select>
          {showError("cwe") && <div className="form-error">CWE is required</div>}
        </div>

        <div className="form-group">
          <label>Status</label>
          <select
            name="status"
            value={form.status}
            onChange={onChange}
            onBlur={handleBlur}
            className={showError("status") ? "form-error" : ""}
          >
            <option value="">Select Status</option>
            {Object.values(STATES).map((status) => (
              <option key={status} value={status}>
                {status}
              </option>
            ))}
          </select>
          {showError("status") && <div className="form-error">Status is required</div>}
        </div>

        <div className="form-group form-group-full">
          <label>Description</label>
          <textarea
            name="description"
            value={form.description}
            onChange={onChange}
            onBlur={handleBlur}
            placeholder="Description"
            className={showError("description") ? "form-error" : ""}
          />
          {showError("description") && <div className="form-error">Description is required</div>}
        </div>

        <div className="form-group form-group-full">
          <label>Suggested Fix</label>
          <textarea
            name="suggestedFix"
            value={form.suggestedFix}
            onChange={onChange}
            onBlur={handleBlur}
            placeholder="Suggested Fix"
            className={showError("suggestedFix") ? "form-error" : ""}
          />
          {showError("suggestedFix") && <div className="form-error">Suggested Fix is required</div>}
        </div>

        <div className="form-group-actions">
          <button type="submit">
            {editing ? "Update" : "Create"} Vulnerability
          </button>
          {editing && onCancel && (
            <button type="button" onClick={onCancel} className="cancel-button">
              Cancel
            </button>
          )}
        </div>
      </div>
    </form>
  );
}
