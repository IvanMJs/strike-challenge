import React, { useState, FormEvent, useEffect } from "react";
import "./VulnerabilityForm.scss";
import { STATES, CWE_OPTIONS } from "../../utils/constants";
import { VulnerabilityFormData } from "../../types/vulnerability";

interface VulnerabilityFormProps {
  form: VulnerabilityFormData;
  onChange: (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => void;
  onSubmit: (e: FormEvent) => void;
  onCancel?: () => void;
  editing?: boolean;
  criticalityOptions: string[];
}

export default function VulnerabilityForm({
  form,
  onChange,
  onSubmit,
  onCancel,
  editing,
  criticalityOptions,
}: VulnerabilityFormProps) {
  const [touched, setTouched] = useState<Record<string, boolean>>({});
  const [submitted, setSubmitted] = useState(false);

  // Reset form state on form change or when editing state changes
  useEffect(() => {
    setTouched({});
    setSubmitted(false);
  }, [form, editing]);

  const validateField = (name: string, value: string | undefined): boolean => {
    if (!value?.toString().trim()) {
      return false;
    }
    return true;
  };

  function handleBlur(e: React.FocusEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>): void {
    const { name } = e.target;
    setTouched(prev => ({ ...prev, [name]: true }));
  }

  function handleSubmit(e: FormEvent<HTMLFormElement>): void {
    e.preventDefault();
    setSubmitted(true);

    const allTouched = Object.keys(form).reduce((acc, key) => ({
      ...acc,
      [key]: true
    }), {});
    setTouched(allTouched);

    const isValid = Object.entries(form).every(([key, value]) => validateField(key, value));

    if (!isValid) {
      return;
    }

    onSubmit(e);
  }

  return (
    <form onSubmit={handleSubmit} className="vuln-form" aria-label="vulnerability-form">
      <div className="vuln-form-grid">
        <div className="form-group">
          <label htmlFor="title">Title</label>
          <input
            id="title"
            name="title"
            type="text"
            value={form.title}
            onChange={onChange}
            onBlur={handleBlur}
            placeholder="Title"
            className={touched.title && !form.title.trim() ? "error" : ""}
          />
          {touched.title && !form.title.trim() && <div data-testid="form-error" className="error-text">Title is required</div>}
        </div>

        <div className="form-group">
          <label htmlFor="criticality">Criticality</label>
          <select
            id="criticality"
            name="criticality"
            value={form.criticality}
            onChange={onChange}
            onBlur={handleBlur}
            className={touched.criticality && !form.criticality ? "error" : ""}
          >
            <option value="">Select Criticality</option>
            {criticalityOptions.map((option) => (
              <option key={option} value={option}>
                {option}
              </option>
            ))}
          </select>
          {touched.criticality && !form.criticality && <div data-testid="form-error" className="error-text">Criticality is required</div>}
        </div>

        <div className="form-group">
          <label htmlFor="cwe">CWE</label>
          <select
            id="cwe"
            name="cwe"
            value={form.cwe}
            onChange={onChange}
            onBlur={handleBlur}
            className={touched.cwe && !form.cwe ? "error" : ""}
          >
            <option value="">Select CWE</option>
            {CWE_OPTIONS.map((option) => (
              <option key={option} value={option}>
                {option}
              </option>
            ))}
          </select>
          {touched.cwe && !form.cwe && <div data-testid="form-error" className="error-text">CWE is required</div>}
        </div>

        <div className="form-group">
          <label htmlFor="status">Status</label>
          <select
            id="status"
            name="status"
            value={form.status}
            onChange={onChange}
            onBlur={handleBlur}
            className={touched.status && !form.status ? "error" : ""}
          >
            <option value="">Select Status</option>
            {Object.values(STATES).map((option) => (
              <option key={option} value={option}>
                {option}
              </option>
            ))}
          </select>
          {touched.status && !form.status && <div data-testid="form-error" className="error-text">Status is required</div>}
        </div>

        <div className="form-group form-group-full">
          <label htmlFor="description">Description</label>
          <textarea
            id="description"
            name="description"
            value={form.description}
            onChange={onChange}
            onBlur={handleBlur}
            placeholder="Description"
            className={touched.description && !form.description.trim() ? "error" : ""}
          />
          {touched.description && !form.description.trim() && <div data-testid="form-error" className="error-text">Description is required</div>}
        </div>

        <div className="form-group form-group-full">
          <label htmlFor="suggestedFix">Suggested Fix</label>
          <textarea
            id="suggestedFix"
            name="suggestedFix"
            value={form.suggestedFix || ""}
            onChange={onChange}
            onBlur={handleBlur}
            placeholder="Suggested Fix"
            className={touched.suggestedFix && !form.suggestedFix?.trim() ? "error" : ""}
          />
          {touched.suggestedFix && !form.suggestedFix?.trim() && <div data-testid="form-error" className="error-text">Suggested Fix is required</div>}
        </div>

        <div className="form-group-actions">
          <button type="submit">{editing ? "Update" : "Create"} Vulnerability</button>
          {onCancel && (
            <button type="button" onClick={onCancel}>
              Cancel
            </button>
          )}
        </div>
      </div>
    </form>
  );
}
