import { createContext, useContext, useReducer, ReactNode, Dispatch } from 'react';
import { Vulnerability } from '../types/vulnerability';
import { 
  vulnerabilityReducer, 
  VulnerabilityAction, 
  initialState,
  Filters
} from '../reducers/vulnerabilityReducer';

interface VulnerabilityContextType {
  vulnerabilities: Vulnerability[];
  filteredVulnerabilities: Vulnerability[];
  loading: boolean;
  error: string | null;
  filters: Filters;
  dispatch: Dispatch<VulnerabilityAction>;
}

export const VulnerabilityContext = createContext<VulnerabilityContextType | undefined>(undefined);

interface VulnerabilityProviderProps {
  children: ReactNode;
}

export function VulnerabilityProvider({ children }: VulnerabilityProviderProps) {
  const [state, dispatch] = useReducer(vulnerabilityReducer, initialState);

  return (
    <VulnerabilityContext.Provider      value={{
        vulnerabilities: state.vulnerabilities,        filteredVulnerabilities: state.vulnerabilities
          // First, remove any duplicates by ID
          .reduce((acc, current) => {
            const exists = acc.find(item => item.id === current.id);
            if (!exists) {
              return [...acc, current];
            }
            return acc;
          }, [] as Vulnerability[])
          // Then apply filters
          .filter(v => {
            const { status, criticality, search } = state.filters;
            const searchTerm = search.toLowerCase().trim();
            
            // Status filter
            const statusMatch = !status || v.status === status;
            
            // Criticality filter
            const criticalityMatch = !criticality || v.criticality === criticality;
            
            // Search filter
            const searchMatch = !searchTerm || 
              v.title.toLowerCase().includes(searchTerm) ||
              v.description.toLowerCase().includes(searchTerm) ||
              v.cwe.toLowerCase().includes(searchTerm) ||
              v.status.toLowerCase().includes(searchTerm) ||
              v.criticality.toLowerCase().includes(searchTerm);
            
            return statusMatch && criticalityMatch && searchMatch;
          }),
        loading: state.loading,
        error: state.error,
        filters: state.filters,
        dispatch
      }}
    >
      {children}
    </VulnerabilityContext.Provider>
  );
}

export function useVulnerabilities() {
  const context = useContext(VulnerabilityContext);
  if (context === undefined) {
    throw new Error('useVulnerabilities must be used within a VulnerabilityProvider');
  }
  return context;
}
