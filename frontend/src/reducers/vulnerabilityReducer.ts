import { Vulnerability } from '../types/vulnerability';
import { VulnerabilityState as ConstantVulnerabilityState } from '../types/constants';

export type VulnerabilityAction =
  | { type: 'SET_VULNERABILITIES'; payload: Vulnerability[] }
  | { type: 'ADD_VULNERABILITY'; payload: Vulnerability }
  | { type: 'UPDATE_VULNERABILITY'; payload: Vulnerability }
  | { type: 'DELETE_VULNERABILITY'; payload: string | number }
  | { type: 'SET_LOADING'; payload: boolean }
  | { type: 'SET_ERROR'; payload: string | null }
  | { type: 'SET_FILTER'; payload: { key: 'status' | 'criticality' | 'search'; value: string } }
  | { type: 'CLEAR_FILTERS' };

export interface Filters {
  status: ConstantVulnerabilityState | '';
  criticality: string;
  search: string;
}

export interface VulnerabilityState {
  vulnerabilities: Vulnerability[];
  loading: boolean;
  error: string | null;
  filters: Filters;
}

export const initialState: VulnerabilityState = {
  vulnerabilities: [],
  loading: false,
  error: null,
  filters: {
    status: '',
    criticality: '',
    search: ''
  }
};

export function vulnerabilityReducer(
  state: VulnerabilityState,
  action: VulnerabilityAction
): VulnerabilityState {
  switch (action.type) {    case 'SET_VULNERABILITIES':
      // Ensure vulnerabilities are unique by ID
      const uniqueVulnerabilities = action.payload.reduce((acc, current) => {
        const exists = acc.find(item => item.id === current.id);
        if (!exists) {
          return [...acc, current];
        }
        return acc;
      }, [] as Vulnerability[]);

      return {
        ...state,
        vulnerabilities: uniqueVulnerabilities,
        loading: false,
        error: null,
      };

    case 'ADD_VULNERABILITY':
      return {
        ...state,
        vulnerabilities: [...state.vulnerabilities, action.payload],
        loading: false,
        error: null,
      };    case 'UPDATE_VULNERABILITY':
      return {
        ...state,
        vulnerabilities: state.vulnerabilities.map((vulnerability) =>
          vulnerability.id === action.payload.id
            ? {
                ...action.payload,
                history: [...(action.payload.history || [])],
                status: action.payload.status
              }
            : vulnerability
        ),
        loading: false,
        error: null,
      };

    case 'DELETE_VULNERABILITY':
      return {
        ...state,
        vulnerabilities: state.vulnerabilities.filter(
          (vulnerability) => vulnerability.id !== action.payload
        ),
        loading: false,
        error: null,
      };

    case 'SET_LOADING':
      return {
        ...state,
        loading: action.payload,
        error: null,
      };

    case 'SET_ERROR':
      return {
        ...state,
        error: action.payload,
        loading: false,
      };

    case 'SET_FILTER':
      return {
        ...state,
        filters: {
          ...state.filters,
          [action.payload.key]: action.payload.value
        }
      };

    case 'CLEAR_FILTERS':
      return {
        ...state,
        filters: {
          status: '',
          criticality: '',
          search: ''
        }
      };

    default:
      return state;
  }
}
