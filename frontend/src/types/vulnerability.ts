import type { VulnerabilityState, VulnerabilityCriticality } from './constants';

export type HistoryEntry = {
  at: string;
  changes: {
    field: string;
    from: string;
    to: string;
  }[];
};

export interface Vulnerability {
  id: string | number;
  title: string;
  description: string;
  criticality: VulnerabilityCriticality;
  status: VulnerabilityState;
  cwe: string;
  suggestedFix?: string;
  createdAt?: string;
  history?: HistoryEntry[];
}

export interface VulnerabilityFormData {
  title: string;
  description: string;
  criticality: VulnerabilityCriticality | '';
  status: VulnerabilityState | '';
  cwe: string;
  suggestedFix: string;
}

export type VulnerabilityCreate = Omit<Vulnerability, 'id' | 'createdAt' | 'history'>;

export interface VulnerabilityGridProps {
  vulnerabilities: Vulnerability[];
  STATES: Record<string, VulnerabilityState>;
  onEdit?: (vulnerability: Vulnerability) => void;
  onDelete?: (vulnerability: Vulnerability) => void;
  onStatusChange?: (vulnerability: Vulnerability, status: VulnerabilityState) => void;
}

export interface VulnerabilityCardProps {
  vuln: Vulnerability;
  STATES: Record<string, VulnerabilityState>;
  onEdit?: (vulnerability: Vulnerability) => void;
  onDelete?: (vulnerability: Vulnerability) => void;
  onStatusChange?: (vulnerability: Vulnerability, status: VulnerabilityState) => void;
}
