import { Request, Response, NextFunction } from 'express';
import * as vulnerabilityService from '../../services/vulnerabilityService';
import { VulnerabilityRequest } from '../../domain/interfaces/vulnerability';
import { STATES } from '../../utils/constants';

export const getAllVulnerabilities = (_req: Request, res: Response) => {
  try {
    const vulnerabilities = vulnerabilityService.getAllVulnerabilities();
    res.json(vulnerabilities);
  } catch (error) {
    res.status(500).json({ error: "Internal server error" });
  }
};

export const getVulnerabilityById = (req: Request, res: Response) => {
  try {
    const id = parseInt(req.params.id);
    if (isNaN(id)) {
      return res.status(400).json({ error: "Invalid ID format" });
    }

    const vuln = vulnerabilityService.getVulnerabilityById(id);
    if (!vuln) return res.status(404).json({ error: "Vulnerability not found" });
    
    res.json(vuln);
  } catch (error) {
    res.status(500).json({ error: "Internal server error" });
  }
};

export const createVulnerability = (req: Request<{}, {}, VulnerabilityRequest>, res: Response) => {
  try {
    const { title, status } = req.body;
    
    if (!title || !status || !STATES.includes(status)) {
      return res.status(400).json({ 
        error: "Invalid data",
        details: "Title and valid status are required" 
      });
    }

    const vuln = vulnerabilityService.createVulnerability(req.body);
    res.status(201).json(vuln);
  } catch (error) {
    res.status(500).json({ error: "Internal server error" });
  }
};

export const updateVulnerability = (
  req: Request<{ id: string }, {}, Partial<VulnerabilityRequest>>, 
  res: Response
) => {
  try {
    const id = parseInt(req.params.id);
    if (isNaN(id)) {
      return res.status(400).json({ error: "Invalid ID format" });
    }

    if (req.body.status && !STATES.includes(req.body.status)) {
      return res.status(400).json({ error: "Invalid status value" });
    }

    const vuln = vulnerabilityService.updateVulnerability(id, req.body);
    if (!vuln) return res.status(404).json({ error: "Vulnerability not found" });
    
    res.json(vuln);
  } catch (error) {
    res.status(500).json({ error: "Internal server error" });
  }
};

export const deleteVulnerability = (req: Request, res: Response) => {
  try {
    const id = parseInt(req.params.id);
    if (isNaN(id)) {
      return res.status(400).json({ error: "Invalid ID format" });
    }

    const success = vulnerabilityService.deleteVulnerability(id);
    if (!success) return res.status(404).json({ error: "Vulnerability not found" });
    
    res.status(204).end();
  } catch (error) {
    res.status(500).json({ error: "Internal server error" });
  }
};