import express from 'express';
import type { Request, Response, NextFunction } from 'express';
import * as vulnerabilityController from '../controllers/vulnerabilityController';
import { VulnerabilityRequest } from '../../domain/interfaces/vulnerability';
import { checkAuth, checkRole } from '../middleware/authMiddleware';
import { ROLES } from '../../config/auth.config';

type ParamsWithId = {
  id: string;
} & Record<string, string>;

const router = express.Router();

// Apply authentication middleware to all routes
router.use(checkAuth as express.RequestHandler);

// GET all vulnerabilities (both admin and user can access)
router.get('/', 
  checkRole(ROLES.ADMIN, ROLES.USER) as express.RequestHandler,
  (req: Request, res: Response) => {
    vulnerabilityController.getAllVulnerabilities(req, res);
  }
);

// GET single vulnerability by ID (both admin and user can access)
router.get('/:id', 
  checkRole(ROLES.ADMIN, ROLES.USER) as express.RequestHandler,
  (req: Request<ParamsWithId>, res: Response) => {
    vulnerabilityController.getVulnerabilityById(req, res);
  }
);

// POST create new vulnerability (both admin and user can create)
router.post('/', 
  checkRole(ROLES.ADMIN, ROLES.USER) as express.RequestHandler,
  (req: Request<{}, {}, VulnerabilityRequest>, res: Response) => {
    vulnerabilityController.createVulnerability(req, res);
  }
);

// PUT update vulnerability (only admin can update)
router.put('/:id', 
  checkRole(ROLES.ADMIN) as express.RequestHandler,
  (req: Request<ParamsWithId, {}, Partial<VulnerabilityRequest>>, res: Response) => {
    vulnerabilityController.updateVulnerability(req, res);
  }
);

// DELETE vulnerability (only admin can delete)
router.delete('/:id', 
  checkRole(ROLES.ADMIN) as express.RequestHandler,
  (req: Request<ParamsWithId>, res: Response) => {
    vulnerabilityController.deleteVulnerability(req, res);
  }
);

export { router as vulnerabilityRoutes };