import { Vulnerability, VulnerabilityRequest } from '../domain/interfaces/vulnerability'

let vulnerabilities: Vulnerability[] = [];

export const getAllVulnerabilities = (): Vulnerability[] => {
  return vulnerabilities;
};

export const createVulnerability = (
  data: VulnerabilityRequest
): Vulnerability => {
  if (!data.title) {
    throw new Error('Title is required');
  }
  const newVulnerability: Vulnerability = {
    id: vulnerabilities.length + 1,
    title: data.title,
    description: data.description,
    criticality: data.criticality,
    cwe: data.cwe,
    suggestedFix: data.suggestedFix,
    status: data.status || 'OPEN',
    createdAt: new Date(),
    updatedAt: new Date(),
  };

  vulnerabilities.push(newVulnerability);
  return newVulnerability;
};

export const getVulnerabilityById = (id: number): Vulnerability | undefined => {
  return vulnerabilities.find((v) => v.id === id);
};

export const updateVulnerability = (
  id: number,
  data: VulnerabilityRequest
): Vulnerability | undefined => {
  const vuln = vulnerabilities.find((v) => v.id === id);
  if (!vuln) return undefined;

  Object.assign(vuln, {
    ...(data.title && { title: data.title }),
    ...(data.description && { description: data.description }),
    ...(data.criticality && { criticality: data.criticality }),
    ...(data.cwe && { cwe: data.cwe }),
    ...(data.suggestedFix && { suggestedFix: data.suggestedFix }),
    ...(data.status && { status: data.status }),
    updatedAt: new Date(),
  });

  return vuln;
};

export const deleteVulnerability = (id: number): boolean => {
  const index = vulnerabilities.findIndex((v) => v.id === id);
  if (index === -1) return false;

  vulnerabilities.splice(index, 1);
  return true;
};
