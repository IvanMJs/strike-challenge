import React, { useEffect, useState } from 'react';
import VulnerabilityForm from '../components/vulnerabilityForm/VulnerabilityForm';
import VulnerabilityGrid from '../components/vulnerabilityGrid/VulnerabilityGrid';
import FiltersBar from '../components/filterBar/FiltersBar';
import { useAuth } from '../context/AuthContext';
import { useVulnerabilities } from '../context/VulnerabilityContext';
import { STATES, CRITICALITY_OPTIONS } from '../utils/constants';
import { VulnerabilityState } from '../types/constants';
import { VulnerabilityData } from '../types/models';
import { createVulnerability, deleteVulnerability, fetchVulnerabilities, updateVulnerability } from '../services/vulnerabilityService';

const initialForm = {
    title: '',
    description: '',
    criticality: '',
    cwe: '',
    suggestedFix: '',
    status: 'Pending Fix' as VulnerabilityState,
};

export function VulnerabilityView() {
    const { dispatch, filteredVulnerabilities } = useVulnerabilities();
    const { isAdmin } = useAuth();
    const [editingId, setEditingId] = useState<string | null>(null);
    const [error, setError] = useState('');
    const [isLoading, setIsLoading] = useState(true);
    const [form, setForm] = useState<Omit<VulnerabilityData, 'id'>>(initialForm);

    useEffect(() => {
        loadVulnerabilities();
    }, []);

    async function loadVulnerabilities() {
        setIsLoading(true);
        try {
            const vulns = await fetchVulnerabilities();
            dispatch({ type: 'SET_VULNERABILITIES', payload: vulns });
        } catch (err) {
            setError('Failed to fetch vulnerabilities');
            console.error('Error fetching vulnerabilities:', err);
        } finally {
            setIsLoading(false);
        }
    }

    function handleChange(e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) {
        setForm({ ...form, [e.target.name]: e.target.value });
    }

    async function handleSubmit(e: React.FormEvent) {
        e.preventDefault();
        setError('');
        try {
            if (editingId) {
                if (!isAdmin) {
                    setError('You do not have permission to edit vulnerabilities');
                    return;
                }
                const updatedVuln = await updateVulnerability(editingId.toString(), form);
                dispatch({ type: 'UPDATE_VULNERABILITY', payload: updatedVuln as VulnerabilityData });
            } else {
                const newVuln = await createVulnerability(form);
                dispatch({ type: 'ADD_VULNERABILITY', payload: newVuln as VulnerabilityData });
            }
            // Reset form state
            setForm(initialForm);
            setEditingId(null);
        } catch (err) {
            setError(editingId ? 'Failed to update vulnerability' : 'Failed to create vulnerability');
            console.error('Error saving vulnerability:', err);
        }
    }

    function handleEdit(vuln: VulnerabilityData) {
        if (!isAdmin) return;
        setEditingId(vuln.id.toString());
        setForm({
            title: vuln.title,
            description: vuln.description,
            criticality: vuln.criticality,
            cwe: vuln.cwe,
            suggestedFix: vuln.suggestedFix || '',
            status: vuln.status,
        });
    }

    async function handleDelete(vulnerability: VulnerabilityData) {
        if (!isAdmin) return;
        try {
            await deleteVulnerability(vulnerability.id.toString());
            dispatch({ type: 'DELETE_VULNERABILITY', payload: vulnerability });
        } catch (err) {
            setError('Failed to delete vulnerability');
            console.error('Error deleting vulnerability:', err);
        }
    }
    
    async function handleStatusChange(vulnerability: VulnerabilityData, status: VulnerabilityState) {
        if (!isAdmin) return;
        try {
            const { id, ...vulnData } = vulnerability;
            const updatedVuln = await updateVulnerability(id.toString(), { ...vulnData, status });
            dispatch({ type: 'UPDATE_VULNERABILITY', payload: updatedVuln as VulnerabilityData });
        } catch (err) {
            setError('Failed to update status');
            console.error('Error updating status:', err);
        }
    }

    return (
        <div className="vulnerability-view">
            {error && <div className="error-message">{error}</div>}      {(!editingId || isAdmin) && (
                <VulnerabilityForm
                    onSubmit={handleSubmit}
                    onChange={handleChange}
                    form={form}
                    editing={!!editingId}
                    criticalityOptions={CRITICALITY_OPTIONS}
                />
            )}
            <FiltersBar />
            {isLoading ? (
                <div className="loading">Loading vulnerabilities...</div>
            ) : (<VulnerabilityGrid
                vulnerabilities={filteredVulnerabilities}
                onEdit={isAdmin ? handleEdit : undefined}
                onDelete={isAdmin ? handleDelete : undefined}
                onStatusChange={isAdmin ? handleStatusChange : undefined}
                STATES={STATES}
            />
            )}
        </div>
    );
}
