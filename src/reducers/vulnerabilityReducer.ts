import { VulnerabilityState, VulnerabilityAction } from '../types/vulnerability.js';
import { Vulnerability } from '../types/models.js';

const filterVulnerabilities = (vulnerabilities: Vulnerability[], filters: VulnerabilityState['filters']): Vulnerability[] => {
  return vulnerabilities.filter(vulnerability => {
    const matchesStatus = !filters.status || vulnerability.status === filters.status;
    const matchesCriticality = !filters.criticality || vulnerability.criticality === filters.criticality;
    const matchesSearch = !filters.search || 
      vulnerability.title.toLowerCase().includes(filters.search.toLowerCase()) ||
      (vulnerability.description?.toLowerCase().includes(filters.search.toLowerCase())) ||
      (vulnerability.cwe?.toLowerCase().includes(filters.search.toLowerCase()));

    return matchesStatus && matchesCriticality && matchesSearch;
  });
};

export const vulnerabilityReducer = (
  state: VulnerabilityState,
  action: VulnerabilityAction
): VulnerabilityState => {
  switch (action.type) {
    case 'SET_VULNERABILITIES':
      return {
        ...state,
        vulnerabilities: action.payload,
        filteredVulnerabilities: filterVulnerabilities(action.payload, state.filters),
        loading: false,
        error: null
      };

    case 'SET_LOADING':
      return {
        ...state,
        loading: action.payload
      };

    case 'SET_ERROR':
      return {
        ...state,
        error: action.payload,
        loading: false
      };

    case 'ADD_VULNERABILITY': {
      const newVulnerabilities = [...state.vulnerabilities, action.payload];
      return {
        ...state,
        vulnerabilities: newVulnerabilities,
        filteredVulnerabilities: filterVulnerabilities(newVulnerabilities, state.filters)
      };
    }

    case 'UPDATE_VULNERABILITY': {
      const newVulnerabilities = state.vulnerabilities.map(vulnerability =>
        vulnerability.id === action.payload.id ? action.payload : vulnerability
      );
      return {
        ...state,
        vulnerabilities: newVulnerabilities,
        filteredVulnerabilities: filterVulnerabilities(newVulnerabilities, state.filters)
      };
    }

    case 'DELETE_VULNERABILITY': {
      const newVulnerabilities = state.vulnerabilities.filter(
        vulnerability => vulnerability.id !== Number(action.payload)
      );
      return {
        ...state,
        vulnerabilities: newVulnerabilities,
        filteredVulnerabilities: filterVulnerabilities(newVulnerabilities, state.filters)
      };
    }

    case 'SET_FILTERS':
      return {
        ...state,
        filters: {
          ...state.filters,
          ...action.payload
        },
        filteredVulnerabilities: filterVulnerabilities(
          state.vulnerabilities,
          { ...state.filters, ...action.payload }
        )
      };

    default:
      return state;
  }
};
