import React, { createContext, useContext, useReducer } from 'react';
import { Vulnerability } from '../types/vulnerability';
import { VulnerabilityState } from '../types/constants';
import vulnerabilityReducer, { VulnerabilityAction } from '../reducers/vulnerabilityReducer';

interface VulnerabilityContextType {
  vulnerabilities: Vulnerability[];
  filteredVulnerabilities: Vulnerability[];
  filters: {
    status: VulnerabilityState | '';
    criticality: string;
    search: string;
  };
  dispatch: React.Dispatch<VulnerabilityAction>;
}

export const VulnerabilityContext = createContext<VulnerabilityContextType | undefined>(undefined);

interface VulnerabilityProviderProps {
  children: React.ReactNode;
}

export function VulnerabilityProvider({ children }: VulnerabilityProviderProps) {
  const [state, dispatch] = useReducer(vulnerabilityReducer, {
    vulnerabilities: [],
    filteredVulnerabilities: [],
    filters: {
      status: '',
      criticality: '',
      search: '',
    },
  });

  return (
    <VulnerabilityContext.Provider value={{ ...state, dispatch }}>
      {children}
    </VulnerabilityContext.Provider>
  );
}

export function useVulnerabilities() {
  const context = useContext(VulnerabilityContext);
  if (context === undefined) {
    throw new Error('useVulnerabilities must be used within a VulnerabilityProvider');
  }
  return context;
}
