import { createContext, useContext, useReducer, ReactNode } from 'react';
import { VulnerabilityState, VulnerabilityAction } from '../types/vulnerability';
import { vulnerabilityReducer } from '../reducers/vulnerabilityReducer';

const initialState: VulnerabilityState = {
  vulnerabilities: [],
  filteredVulnerabilities: [],
  loading: false,
  error: null,
  filters: {
    status: '',
    criticality: '',
    search: ''
  }
};

const VulnerabilityContext = createContext<{
  state: VulnerabilityState;
  dispatch: React.Dispatch<VulnerabilityAction>;
} | undefined>(undefined);

export const VulnerabilityProvider = ({ children }: { children: ReactNode }) => {
  const [state, dispatch] = useReducer(vulnerabilityReducer, initialState);

  return (
    <VulnerabilityContext.Provider value={{ state, dispatch }}>
      {children}
    </VulnerabilityContext.Provider>
  );
};

export const useVulnerabilityContext = () => {
  const context = useContext(VulnerabilityContext);
  if (context === undefined) {
    throw new Error('useVulnerabilityContext must be used within a VulnerabilityProvider');
  }
  return context;
};
