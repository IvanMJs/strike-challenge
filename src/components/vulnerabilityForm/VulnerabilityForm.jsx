import React, { useState } from "react";
import "./VulnerabilityForm.scss";
import { STATES } from "../../utils/constants";

const CWE_OPTIONS = [
  "CWE-79",
  "CWE-89",
  "CWE-22",
  "CWE-200",
  "CWE-287",
  "CWE-352",
  "CWE-502",
  "CWE-611",
  "CWE-798",
  "CWE-434",
];
const CRITICALITY_OPTIONS = ["High", "Medium", "Low"];

export default function VulnerabilityForm({
  form,
  onChange,
  onSubmit,
  editingId,
  onCancel,
}) {
  const [touched, setTouched] = useState({});
  const [submitted, setSubmitted] = useState(false);

  function handleBlur(e) {
    setTouched({ ...touched, [e.target.name]: true });
  }

  function handleSubmit(e) {
    e.preventDefault();
    setSubmitted(true);
    if (
      !form.title.trim() ||
      !form.criticality ||
      !form.cwe ||
      !form.suggestedFix.trim() ||
      !form.status ||
      !form.description.trim()
    ) {
      return;
    }
    onSubmit(e);
    setTouched({});
    setSubmitted(false);
  }

  return (
    <form className="vuln-form vuln-form-grid" onSubmit={handleSubmit}>
      <div className="form-group">
        <label htmlFor="title">Title</label>
        <input
          id="title"
          name="title"
          placeholder="Title"
          value={form.title}
          onChange={onChange}
          onBlur={handleBlur}
          required
        />
        {((submitted || touched.title) && !form.title.trim()) && (
          <div className="form-error">Please complete the title</div>
        )}
      </div>
      <div className="form-group">
        <label htmlFor="criticality">Criticality</label>
        <select
          id="criticality"
          name="criticality"
          value={form.criticality}
          onChange={onChange}
          onBlur={handleBlur}
          required
          className={
            form.criticality === "High"
              ? "criticality-high"
              : form.criticality === "Medium"
              ? "criticality-medium"
              : form.criticality === "Low"
              ? "criticality-low"
              : ""
          }
        >
          <option value="">Select Criticality</option>
          {CRITICALITY_OPTIONS.map((opt) => (
            <option key={opt} value={opt}>
              {opt}
            </option>
          ))}
        </select>
        {((submitted || touched.criticality) && !form.criticality) && (
          <div className="form-error">Please complete the criticality</div>
        )}
      </div>
      <div className="form-group">
        <label htmlFor="cwe">CWE</label>
        <select
          id="cwe"
          name="cwe"
          value={form.cwe}
          onChange={onChange}
          onBlur={handleBlur}
          required
        >
          <option value="">Select CWE</option>
          {CWE_OPTIONS.map((opt) => (
            <option key={opt} value={opt}>
              {opt}
            </option>
          ))}
        </select>
        {((submitted || touched.cwe) && !form.cwe) && (
          <div className="form-error">Please complete the cwe</div>
        )}
      </div>
      <div className="form-group">
        <label htmlFor="suggestedFix">Suggested Fix</label>
        <input
          id="suggestedFix"
          name="suggestedFix"
          placeholder="Suggested Fix"
          value={form.suggestedFix}
          onChange={onChange}
          onBlur={handleBlur}
          required
        />
        {((submitted || touched.suggestedFix) && !form.suggestedFix.trim()) && (
          <div className="form-error">Please complete the suggested fix</div>
        )}
      </div>
      <div className="form-group">
        <label htmlFor="status">Status</label>
        <select
          id="status"
          name="status"
          value={form.status}
          onChange={onChange}
          onBlur={handleBlur}
          required
        >
          {STATES.map((s) => (
            <option key={s} value={s}>
              {s}
            </option>
          ))}
        </select>
        {((submitted || touched.status) && !form.status) && (
          <div className="form-error">Please complete the status</div>
        )}
      </div>
      <div className="form-group form-group-full">
        <label htmlFor="description">Description</label>
        <textarea
          id="description"
          name="description"
          placeholder="Description"
          value={form.description}
          onChange={onChange}
          onBlur={handleBlur}
          required
        />
        {((submitted || touched.description) && !form.description.trim()) && (
          <div className="form-error">Please complete the description</div>
        )}
      </div>
      <div className="form-group form-group-actions">
        <button type="submit">{editingId ? "Update" : "Create"}</button>
        {editingId && (
          <button type="button" onClick={onCancel}>
            Cancel
          </button>
        )}
      </div>
    </form>
  );
}
