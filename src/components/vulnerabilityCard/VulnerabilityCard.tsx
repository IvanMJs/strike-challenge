import { useState } from 'react';
import './VulnerabilityCard.scss';
import ConfirmDialog from '../confirmDialog/ConfirmDialog';
import { Vulnerability } from '../../types/models';
import { VulnerabilityState, STATES } from '../../types/constants';

interface VulnerabilityCardProps {
  vulnerability: Vulnerability;
  onEdit: (vulnerability: Vulnerability) => void;
  onDelete: (id: number) => void;
  onStatusChange: (id: number, status: VulnerabilityState) => void;
}

const VulnerabilityCard = ({
  vulnerability,
  onEdit,
  onDelete,
  onStatusChange
}: VulnerabilityCardProps) => {
  const [showConfirm, setShowConfirm] = useState(false);

  const handleStatusChange = (status: VulnerabilityState) => {
    onStatusChange(vulnerability.id, status);
  };

  return (
    <div className="vuln-card">
      <div className="vuln-card-header">
        <h3>{vulnerability.title}</h3>
      </div>

      <div className="vuln-card-content">
        <p>
          <strong>Status: </strong>
          <select
            value={vulnerability.status}
            onChange={(e) => handleStatusChange(e.target.value as VulnerabilityState)}
          >
            {Object.values(STATES).map(state => (
              <option key={state} value={state}>{state}</option>
            ))}
          </select>
        </p>
        {vulnerability.description && (
          <p>
            <strong>Description: </strong>
            {vulnerability.description}
          </p>
        )}
        {vulnerability.criticality && (
          <p>
            <strong>Criticality: </strong>
            <span className={`criticality-${vulnerability.criticality.toLowerCase()}`}>
              {vulnerability.criticality}
            </span>
          </p>
        )}
        {vulnerability.cwe && (
          <p>
            <strong>CWE: </strong>
            {vulnerability.cwe}
          </p>
        )}
        {vulnerability.suggestedFix && (
          <p>
            <strong>Suggested Fix: </strong>
            {vulnerability.suggestedFix}
          </p>
        )}
        
        {vulnerability.history && vulnerability.history.length > 0 && (
          <div className="history-section">
            <strong>Status History:</strong>
            <ul>
              {vulnerability.history.map((entry, index) => (
                <li key={index}>
                  {entry.from} â†’ {entry.to} ({new Date(entry.at).toLocaleString()})
                </li>
              ))}
            </ul>
          </div>
        )}
      </div>

      <div className="vuln-card-actions">
        <button onClick={() => onEdit(vulnerability)}>Edit</button>
        <button onClick={() => setShowConfirm(true)} className="delete">Delete</button>
      </div>

      <ConfirmDialog
        open={showConfirm}
        message={`Are you sure you want to delete "${vulnerability.title}"?`}
        onConfirm={() => {
          onDelete(vulnerability.id);
          setShowConfirm(false);
        }}
        onCancel={() => setShowConfirm(false)}
      />
    </div>
  );
};

export default VulnerabilityCard;
