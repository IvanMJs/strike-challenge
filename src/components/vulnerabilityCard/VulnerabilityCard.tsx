import React, { useState } from 'react';
import './VulnerabilityCard.scss';
import ConfirmDialog from '../confirmDialog/ConfirmDialog';
import { VulnerabilityCardProps } from '../../types/vulnerability';
import { VulnerabilityState } from '../../types/constants';

interface HistoryEntry {
  from: VulnerabilityState;
  to: VulnerabilityState;
  at: string;
}

export default function VulnerabilityCard({ vuln, STATES, onEdit, onDelete, onStatusChange }: VulnerabilityCardProps){
  const [showConfirm, setShowConfirm] = useState(false);
  const [history, setHistory] = useState(vuln.history || []);


  function handleStatusChange(nextStatus: VulnerabilityState): void {
    onStatusChange(vuln, nextStatus);
    setHistory((prev: HistoryEntry[]) => [
      ...prev,
      { from: vuln.status, to: nextStatus, at: new Date().toLocaleString() }
    ]);
  }

  return (
    <div className="vuln-card">
      <div className="vuln-card-title">{vuln.title}</div>
      <div className="vuln-card-content">
        <div><strong>Description:</strong> {vuln.description}</div>
        <div>
          <strong>Criticality:</strong> <span className={
            vuln.criticality === 'High' ? 'criticality-high' :
              vuln.criticality === 'Medium' ? 'criticality-medium' :
                vuln.criticality === 'Low' ? 'criticality-low' : ''
          }>{vuln.criticality}</span>
        </div>
        <div><strong>CWE:</strong> {vuln.cwe}</div>
        <div><strong>Suggested Fix:</strong> {vuln.suggestedFix}</div>
        <div><strong>Status: </strong>          <select value={vuln.status} onChange={e => {
            const next = e.target.value as VulnerabilityState;
            if (vuln.status !== next) {
              handleStatusChange(next);
            }
          }}>
            {Object.values(STATES).map((s: VulnerabilityState) => (
              <option key={s} value={s}>{s}</option>
            ))}
          </select>
        </div>
        <div><strong>Created:</strong> {vuln.createdAt ? new Date(vuln.createdAt).toLocaleDateString() : 'N/A'}</div>
        {history.length > 0 && (
          <div className="vuln-history">
            <strong>History:</strong>
            <ul>
              {history.map((h: HistoryEntry, i: number) => (
                <li key={i}>{h.from} â†’ {h.to} at {h.at}</li>
              ))}
            </ul>
          </div>
        )}
      </div>
      <div className="vuln-card-actions">
        <button onClick={() => onEdit(vuln)}>Edit</button>
        <button onClick={() => setShowConfirm(true)}>Delete</button>
      </div>
      <ConfirmDialog
        open={showConfirm}
        message="Are you sure you want to delete this vulnerability?"
        onConfirm={() => { setShowConfirm(false); onDelete(vuln); }}
        onCancel={() => setShowConfirm(false)}
      />
    </div>
  );
}
