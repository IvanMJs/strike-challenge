const API_URL = 'http://localhost:4000/api/vulnerabilities';

export async function fetchVulnerabilities() {
  const res = await fetch(API_URL);
  if (!res.ok) throw new Error('Failed to fetch vulnerabilities');
  return res.json();
}

export interface VulnerabilityData {
  id?: number;
  title: string;
  description?: string;
  criticality?: string;
  cwe?: string;
  suggestedFix?: string;
  status: string;
  history?: Array<{
    from: string;
    to: string;
    at: string;
  }>;
  createdAt?: Date;
  updatedAt?: Date;
}

export async function createVulnerability(data: Partial<VulnerabilityData>): Promise<VulnerabilityData> {
  if (!data.title) throw new Error('Title is required');
  
  const vulnerabilityData = {
    ...data,
    status: data.status || 'Pending Fix',
    history: [],
    createdAt: new Date(),
    updatedAt: new Date()
  };

  const res = await fetch(API_URL, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(vulnerabilityData),
  });
  
  if (!res.ok) {
    const errorData = await res.json();
    throw new Error(errorData.error || 'Failed to create vulnerability');
  }
  return res.json();
}

export async function updateVulnerability(id: string, data: Partial<VulnerabilityData>): Promise<VulnerabilityData> {
  if (!data.title) throw new Error('Title is required');

  const vulnerabilityData = {
    ...data,
    updatedAt: new Date()
  };

  const res = await fetch(`${API_URL}/${id}`, {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(vulnerabilityData),
  });
  
  if (!res.ok) {
    const errorData = await res.json();
    throw new Error(errorData.error || 'Failed to update vulnerability');
  }
  return res.json();
}

export async function deleteVulnerability(id: string): Promise<void> {
  const res = await fetch(`${API_URL}/${id}`, {
    method: 'DELETE',
    headers: {
      'Content-Type': 'application/json'
    }
  });
  if (!res.ok) {
    const errorData = await res.json();
    throw new Error(errorData.error || 'Failed to delete vulnerability');
  }
}
